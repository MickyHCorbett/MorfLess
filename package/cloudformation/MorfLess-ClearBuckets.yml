---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  MorfLess Clear Buckets

  Clears buckets source, list, search and target to allow tear down of MorfLess deployment stack

Parameters:
  morflessS3WebsiteBucket:
    Type: String
    Default: docksat.space-dev
    Description: The target bucket i.e. website. Dots can be used.
  morflessListBucket:
    Type: String
    Default: docksat.space-list
    Description: The backend list bucket
  morflessSourceBucket:
    Type: String
    Default: docksat.space-source
    Description: The backend source files bucket
  morflessSearchBucket:
    Type: String
    Default: docksat.space-search
    Description: The backend search files bucket

Resources:
  MorflessBackUpContent:
    Properties:
      ServiceToken: !GetAtt DeleteS3ObjectsFunction.Arn
      TargetBucket: !Ref morflessS3WebsiteBucket
      ListBucket: !Ref morflessListBucket
      SourceBucket: !Ref morflessSourceBucket
      SearchBucket: !Ref morflessSearchBucket
    Type: "Custom::S3Objects"
    DeletionPolicy: Delete

  S3DeleteRole:
    Type: AWS::IAM::Role
    Properties:

      Path: /morfless/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: SourceBucketDeleteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${morflessS3WebsiteBucket}"
                  - !Sub "arn:aws:s3:::${morflessS3WebsiteBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessListBucket}"
                  - !Sub "arn:aws:s3:::${morflessListBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessSourceBucket}"
                  - !Sub "arn:aws:s3:::${morflessSourceBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessSearchBucket}"
                  - !Sub "arn:aws:s3:::${morflessSearchBucket}/*"

  DeleteS3ObjectsFunction:
    Properties:
      Description: Deletes objects from a source S3 bucket to a destinations
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt S3DeleteRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse

          import boto3
          from botocore.exceptions import ClientError
          s3resource = boto3.resource('s3')
          s3client = boto3.client('s3')

          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))

              target_bucket = event['ResourceProperties']['TargetBucket']
              list_bucket = event['ResourceProperties']['ListBucket']
              search_bucket = event['ResourceProperties']['SearchBucket']
              source_files_bucket = event['ResourceProperties']['SourceBucket']

              web_deleted = False
              list_deleted = False
              source_files_deleted = False
              search_deleted = False

              result = cfnresponse.SUCCESS

              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

                      web_deleted = delete_objects(target_bucket)
                      list_deleted = delete_objects(list_bucket)
                      source_files_deleted = delete_objects(source_files_bucket)
                      search_deleted = delete_objects(search_bucket)

                      if web_deleted and list_deleted and source_files_deleted and search_deleted:
                          result = cfnresponse.SUCCESS
                      else:
                          result = cfnresponse.FAILED

                  elif event['RequestType'] == 'Delete':
                      # don't delete buckets but send a successful response to be able to delete stack
                      result = cfnresponse.SUCCESS

              except ClientError as e:
                  logger.error('Error: %s', e)
                  result = cfnresponse.FAILED

              cfnresponse.send(event, context, result, {})


          def delete_objects(bucket):

              filelist = []
              deleted = False
              for object in s3client.list_objects(Bucket=bucket)['Contents']:
                  filelist.append(object['Key'])

              if filelist:
                  for file in filelist:
                      s3client.delete_object(
                          Bucket=bucket,
                          Key=file)
                      deleted = True

              return deleted


    Type: AWS::Lambda::Function
