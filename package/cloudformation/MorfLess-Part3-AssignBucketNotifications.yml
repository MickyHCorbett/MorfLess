AWSTemplateFormatVersion: 2010-09-09
Description: >-
  MorfLess Part 3 - Assign notifications to source bucket to call triggerStates lambda

Parameters:
  morflessSourceBucket:
    Type: String
    Default: morfless-mydomain-source
    Description: The backend source files bucket defined in MorfLess setup Part 1
  morflessAppPreFix:
    Type: String
    Default: morfless-mydomain
    Description: The function prefix defined in MorfLess setup Part 1

Resources:
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${morflessAppPreFix}-morfless-triggerStates"
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${morflessSourceBucket}'

  MorflessS3LambdaTrigger:
    Type: 'Custom::RouteTableLambda'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt MorflessAddDeleteNotificationsLambdaFunction.Arn
      LambdaArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${morflessAppPreFix}-morfless-triggerStates"
      Bucket: !Ref morflessSourceBucket


  MorflessS3LambdaNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'


  MorflessAddDeleteNotificationsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Adds notifications for S3 to trigger lambda
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt MorflessS3LambdaNotificationRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import urllib3

          http = urllib3.PoolManager()
          s3resource = boto3.resource('s3')

          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))
              result = 'FAILED'

              try:
                  if event['RequestType'] == 'Delete':

                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      result = 'SUCCESS'

                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']

                      add_notification(LambdaArn, Bucket)
                      result = 'SUCCESS'

              except Exception as e:
                  logger.error('Error: %s', e)
                  result = 'FAILED'

              cfnresponse_send(event, context, result, {})


          def add_notification(LambdaArn, Bucket):
              bucket_notification = s3resource.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*',
                              's3:ObjectRemoved:*'
                          ]
                      }
                  ]
                }
              )


          def delete_notification(Bucket):
              bucket_notification = s3resource.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={}
              )


          # copy of cfnresponse from https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/CloudFormation/MacrosExamples/StackMetrics/lambda/cfnresponse.py

          def cfnresponse_send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):

              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)

              print("Response body:\n" + json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:

                  response = http.request('PUT',responseUrl,body=json_responseBody.encode('utf-8'),headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
