---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  MorfLess Backup Bucket info

  Copies source, list, search and target to a backup if a redeployment is made

Parameters:
  morflessS3WebsiteBucket:
    Type: String
    Default: mydomain.com
    Description: The target bucket i.e. website. Dots can be used.
  morflessListBucket:
    Type: String
    Default: morfless-mydomain-list
    Description: The backend list bucket
  morflessSourceBucket:
    Type: String
    Default: morfless-mydomain-source
    Description: The backend source files bucket
  morflessSearchBucket:
    Type: String
    Default: morfless-mydomain-search
    Description: The backend search files bucket

  BackupBucket:
    Type: String
    Default: morfless-backup
    Description: S3 bucket containing the backups

  WebSetupPrefix:
    Type: String
    Default: web-setup
    Description: Folder containing website backup files
  ListBucketSetupPrefix:
    Type: String
    Default: list-setup
    Description: Folder containing list bucket default files
  SourceBucketSetupPrefix:
    Type: String
    Default: source-files-setup
    Description: Folder containing back end source bucket default files
  SearchBucketSetupPrefix:
    Type: String
    Default: search-setup
    Description: Folder containing back end search bucket files

Resources:
  MorflessBackUpContent:
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      BackUpBucket: !Ref BackupBucket
      TargetBucket: !Ref morflessS3WebsiteBucket
      ListBucket: !Ref morflessListBucket
      SourceBucket: !Ref morflessSourceBucket
      SearchBucket: !Ref morflessSearchBucket
      WebSetUp: !Ref WebSetupPrefix
      ListSetUp: !Ref ListBucketSetupPrefix
      SourceSetUp: !Ref SourceBucketSetupPrefix
      SearchSetUp: !Ref SearchBucketSetupPrefix
    Type: "Custom::S3Objects"
    DeletionPolicy: Delete

  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:

      Path: /morfless/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: SourceBucketReadAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${morflessS3WebsiteBucket}"
                  - !Sub "arn:aws:s3:::${morflessS3WebsiteBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessListBucket}"
                  - !Sub "arn:aws:s3:::${morflessListBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessSourceBucket}"
                  - !Sub "arn:aws:s3:::${morflessSourceBucket}/*"
                  - !Sub "arn:aws:s3:::${morflessSearchBucket}"
                  - !Sub "arn:aws:s3:::${morflessSearchBucket}/*"
              -
                Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${BackupBucket}"
                  - !Sub "arn:aws:s3:::${BackupBucket}/*"

  CopyS3ObjectsFunction:
    Properties:
      Description: Copies objects from a source S3 bucket to a destinations
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse

          import boto3
          from botocore.exceptions import ClientError
          s3resource = boto3.resource('s3')
          s3client = boto3.client('s3')

          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))
              def_bucket = event['ResourceProperties']['BackUpBucket']
              target_bucket = event['ResourceProperties']['TargetBucket']
              list_bucket = event['ResourceProperties']['ListBucket']
              search_bucket = event['ResourceProperties']['SearchBucket']
              source_files_bucket = event['ResourceProperties']['SourceBucket']
              web_setup_prefix = event['ResourceProperties']['WebSetUp']
              list_setup_prefix = event['ResourceProperties']['ListSetUp']
              source_files_setup_prefix = event['ResourceProperties']['SourceSetUp']
              search_setup_prefix = event['ResourceProperties']['SearchSetUp']

              web_copied = False
              list_copied = False
              source_files_copied = False
              search_copied = False

              result = cfnresponse.FAILED

              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

                      web_copied = copy_objects(target_bucket, def_bucket, web_setup_prefix)
                      list_copied = copy_objects(list_bucket, def_bucket, list_setup_prefix)
                      source_files_copied = copy_objects(source_files_bucket, def_bucket, source_files_setup_prefix)
                      search_copied = copy_objects(search_bucket, def_bucket, search_setup_prefix)

                      if web_copied and list_copied and source_files_copied and search_copied:
                          result = cfnresponse.SUCCESS

                  elif event['RequestType'] == 'Delete':
                      # don't delete files but send a successful response to be able to delete stack
                      result = cfnresponse.SUCCESS

              except ClientError as e:
                  logger.error('Error: %s', e)
                  result = cfnresponse.FAILED

              cfnresponse.send(event, context, result, {})


          def copy_objects(source_bucket, target_bucket, prefix):

              filelist = []
              copied = True
              for object in s3client.list_objects(Bucket=source_bucket)['Contents']:
                  filelist.append(object['Key'])

              if filelist:
                  for file in filelist:
                      # remove trailing directory
                      dir_prefix = prefix + '/'
                      file_out = dir_prefix + file
                      copy_source = {
                          'Bucket': source_bucket,
                          'Key': file
                      }
                      s3resource.meta.client.copy(copy_source, target_bucket, file_out)

              return copied


    Type: AWS::Lambda::Function
